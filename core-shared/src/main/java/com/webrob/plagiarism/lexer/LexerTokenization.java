/* The following code was generated by JFlex 1.6.0 */

package com.webrob.plagiarism.lexer;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>lexer.jflex</tt>
 */
public class LexerTokenization
{

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
		    0, 0, 1, 1
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
		    "\11\53\1\57\1\42\1\45\1\45\1\41\16\53\4\0\1\57\1\0" +
				    "\1\55\1\54\1\52\3\0\1\51\1\61\1\44\1\47\1\0\1\47" +
				    "\1\50\1\43\1\2\1\35\1\40\1\37\2\2\1\36\3\2\1\0" +
				    "\1\60\5\0\32\1\1\0\1\56\2\0\1\33\1\0\1\3\1\4" +
				    "\1\10\1\21\1\15\1\16\1\23\1\20\1\13\1\1\1\25\1\22" +
				    "\1\31\1\12\1\11\1\24\1\34\1\7\1\5\1\6\1\14\1\30" +
				    "\1\17\1\32\1\26\1\27\1\61\1\0\1\61\1\0\6\53\1\46" +
				    "\32\53\2\0\4\52\4\0\1\52\2\0\1\53\7\0\1\52\4\0" +
				    "\1\52\5\0\27\52\1\0\37\52\1\0\u01ca\52\4\0\14\52\16\0" +
				    "\5\52\7\0\1\52\1\0\1\52\21\0\160\53\5\52\1\0\2\52" +
				    "\2\0\4\52\10\0\1\52\1\0\3\52\1\0\1\52\1\0\24\52" +
				    "\1\0\123\52\1\0\213\52\1\0\5\53\2\0\236\52\11\0\46\52" +
				    "\2\0\1\52\7\0\47\52\7\0\1\52\1\0\55\53\1\0\1\53" +
				    "\1\0\2\53\1\0\2\53\1\0\1\53\10\0\33\52\5\0\3\52" +
				    "\15\0\5\53\6\0\1\52\4\0\13\53\5\0\53\52\37\53\4\0" +
				    "\2\52\1\53\143\52\1\0\1\52\10\53\1\0\6\53\2\52\2\53" +
				    "\1\0\4\53\2\52\12\53\3\52\2\0\1\52\17\0\1\53\1\52" +
				    "\1\53\36\52\33\53\2\0\131\52\13\53\1\52\16\0\12\53\41\52" +
				    "\11\53\2\52\4\0\1\52\5\0\26\52\4\53\1\52\11\53\1\52" +
				    "\3\53\1\52\5\53\22\0\31\52\3\53\104\0\1\52\1\0\13\52" +
				    "\67\0\33\53\1\0\4\53\66\52\3\53\1\52\22\53\1\52\7\53" +
				    "\12\52\2\53\2\0\12\53\1\0\7\52\1\0\7\52\1\0\3\53" +
				    "\1\0\10\52\2\0\2\52\2\0\26\52\1\0\7\52\1\0\1\52" +
				    "\3\0\4\52\2\0\1\53\1\52\7\53\2\0\2\53\2\0\3\53" +
				    "\1\52\10\0\1\53\4\0\2\52\1\0\3\52\2\53\2\0\12\53" +
				    "\4\52\7\0\1\52\5\0\3\53\1\0\6\52\4\0\2\52\2\0" +
				    "\26\52\1\0\7\52\1\0\2\52\1\0\2\52\1\0\2\52\2\0" +
				    "\1\53\1\0\5\53\4\0\2\53\2\0\3\53\3\0\1\53\7\0" +
				    "\4\52\1\0\1\52\7\0\14\53\3\52\1\53\13\0\3\53\1\0" +
				    "\11\52\1\0\3\52\1\0\26\52\1\0\7\52\1\0\2\52\1\0" +
				    "\5\52\2\0\1\53\1\52\10\53\1\0\3\53\1\0\3\53\2\0" +
				    "\1\52\17\0\2\52\2\53\2\0\12\53\1\0\1\52\17\0\3\53" +
				    "\1\0\10\52\2\0\2\52\2\0\26\52\1\0\7\52\1\0\2\52" +
				    "\1\0\5\52\2\0\1\53\1\52\7\53\2\0\2\53\2\0\3\53" +
				    "\10\0\2\53\4\0\2\52\1\0\3\52\2\53\2\0\12\53\1\0" +
				    "\1\52\20\0\1\53\1\52\1\0\6\52\3\0\3\52\1\0\4\52" +
				    "\3\0\2\52\1\0\1\52\1\0\2\52\3\0\2\52\3\0\3\52" +
				    "\3\0\14\52\4\0\5\53\3\0\3\53\1\0\4\53\2\0\1\52" +
				    "\6\0\1\53\16\0\12\53\11\0\1\52\7\0\3\53\1\0\10\52" +
				    "\1\0\3\52\1\0\27\52\1\0\12\52\1\0\5\52\3\0\1\52" +
				    "\7\53\1\0\3\53\1\0\4\53\7\0\2\53\1\0\2\52\6\0" +
				    "\2\52\2\53\2\0\12\53\22\0\2\53\1\0\10\52\1\0\3\52" +
				    "\1\0\27\52\1\0\12\52\1\0\5\52\2\0\1\53\1\52\7\53" +
				    "\1\0\3\53\1\0\4\53\7\0\2\53\7\0\1\52\1\0\2\52" +
				    "\2\53\2\0\12\53\1\0\2\52\17\0\2\53\1\0\10\52\1\0" +
				    "\3\52\1\0\51\52\2\0\1\52\7\53\1\0\3\53\1\0\4\53" +
				    "\1\52\10\0\1\53\10\0\2\52\2\53\2\0\12\53\12\0\6\52" +
				    "\2\0\2\53\1\0\22\52\3\0\30\52\1\0\11\52\1\0\1\52" +
				    "\2\0\7\52\3\0\1\53\4\0\6\53\1\0\1\53\1\0\10\53" +
				    "\22\0\2\53\15\0\60\52\1\53\2\52\7\53\4\0\10\52\10\53" +
				    "\1\0\12\53\47\0\2\52\1\0\1\52\2\0\2\52\1\0\1\52" +
				    "\2\0\1\52\6\0\4\52\1\0\7\52\1\0\3\52\1\0\1\52" +
				    "\1\0\1\52\2\0\2\52\1\0\4\52\1\53\2\52\6\53\1\0" +
				    "\2\53\1\52\2\0\5\52\1\0\1\52\1\0\6\53\2\0\12\53" +
				    "\2\0\4\52\40\0\1\52\27\0\2\53\6\0\12\53\13\0\1\53" +
				    "\1\0\1\53\1\0\1\53\4\0\2\53\10\52\1\0\44\52\4\0" +
				    "\24\53\1\0\2\53\5\52\13\53\1\0\44\53\11\0\1\53\71\0" +
				    "\53\52\24\53\1\52\12\53\6\0\6\52\4\53\4\52\3\53\1\52" +
				    "\3\53\2\52\7\53\3\52\4\53\15\52\14\53\1\52\17\53\2\0" +
				    "\46\52\1\0\1\52\5\0\1\52\2\0\53\52\1\0\u014d\52\1\0" +
				    "\4\52\2\0\7\52\1\0\1\52\1\0\4\52\2\0\51\52\1\0" +
				    "\4\52\2\0\41\52\1\0\4\52\2\0\7\52\1\0\1\52\1\0" +
				    "\4\52\2\0\17\52\1\0\71\52\1\0\4\52\2\0\103\52\2\0" +
				    "\3\53\40\0\20\52\20\0\125\52\14\0\u026c\52\2\0\21\52\1\0" +
				    "\32\52\5\0\113\52\3\0\3\52\17\0\15\52\1\0\4\52\3\53" +
				    "\13\0\22\52\3\53\13\0\22\52\2\53\14\0\15\52\1\0\3\52" +
				    "\1\0\2\53\14\0\64\52\40\53\3\0\1\52\3\0\2\52\1\53" +
				    "\2\0\12\53\41\0\3\53\2\0\12\53\6\0\130\52\10\0\51\52" +
				    "\1\53\1\52\5\0\106\52\12\0\35\52\3\0\14\53\4\0\14\53" +
				    "\12\0\12\53\36\52\2\0\5\52\13\0\54\52\4\0\21\53\7\52" +
				    "\2\53\6\0\12\53\46\0\27\52\5\53\4\0\65\52\12\53\1\0" +
				    "\35\53\2\0\13\53\6\0\12\53\15\0\1\52\130\0\5\53\57\52" +
				    "\21\53\7\52\4\0\12\53\21\0\11\53\14\0\3\53\36\52\15\53" +
				    "\2\52\12\53\54\52\16\53\14\0\44\52\24\53\10\0\12\53\3\0" +
				    "\3\52\12\53\44\52\122\0\3\53\1\0\25\53\4\52\1\53\4\52" +
				    "\3\53\2\52\11\0\300\52\47\53\25\0\4\53\u0116\52\2\0\6\52" +
				    "\2\0\46\52\2\0\6\52\2\0\10\52\1\0\1\52\1\0\1\52" +
				    "\1\0\1\52\1\0\37\52\2\0\65\52\1\0\7\52\1\0\1\52" +
				    "\3\0\3\52\1\0\7\52\3\0\4\52\2\0\6\52\4\0\15\52" +
				    "\5\0\3\52\1\0\7\52\16\0\5\53\30\0\1\45\1\45\5\53" +
				    "\20\0\2\52\23\0\1\52\13\0\5\53\5\0\6\53\1\0\1\52" +
				    "\15\0\1\52\20\0\15\52\3\0\33\52\25\0\15\53\4\0\1\53" +
				    "\3\0\14\53\21\0\1\52\4\0\1\52\2\0\12\52\1\0\1\52" +
				    "\3\0\5\52\6\0\1\52\1\0\1\52\1\0\1\52\1\0\4\52" +
				    "\1\0\13\52\2\0\4\52\5\0\5\52\4\0\1\52\21\0\51\52" +
				    "\u0a77\0\57\52\1\0\57\52\1\0\205\52\6\0\4\52\3\53\2\52" +
				    "\14\0\46\52\1\0\1\52\5\0\1\52\2\0\70\52\7\0\1\52" +
				    "\17\0\1\53\27\52\11\0\7\52\1\0\7\52\1\0\7\52\1\0" +
				    "\7\52\1\0\7\52\1\0\7\52\1\0\7\52\1\0\7\52\1\0" +
				    "\40\53\57\0\1\52\u01d5\0\3\52\31\0\11\52\6\53\1\0\5\52" +
				    "\2\0\5\52\4\0\126\52\2\0\2\53\2\0\3\52\1\0\132\52" +
				    "\1\0\4\52\5\0\51\52\3\0\136\52\21\0\33\52\65\0\20\52" +
				    "\u0200\0\u19b6\52\112\0\u51cd\52\63\0\u048d\52\103\0\56\52\2\0\u010d\52" +
				    "\3\0\20\52\12\53\2\52\24\0\57\52\1\53\4\0\12\53\1\0" +
				    "\31\52\7\0\1\53\120\52\2\53\45\0\11\52\2\0\147\52\2\0" +
				    "\4\52\1\0\4\52\14\0\13\52\115\0\12\52\1\53\3\52\1\53" +
				    "\4\52\1\53\27\52\5\53\20\0\1\52\7\0\64\52\14\0\2\53" +
				    "\62\52\21\53\13\0\12\53\6\0\22\53\6\52\3\0\1\52\4\0" +
				    "\12\53\34\52\10\53\2\0\27\52\15\53\14\0\35\52\3\0\4\53" +
				    "\57\52\16\53\16\0\1\52\12\53\46\0\51\52\16\53\11\0\3\52" +
				    "\1\53\10\52\2\53\2\0\12\53\6\0\27\52\3\0\1\52\1\53" +
				    "\4\0\60\52\1\53\1\52\3\53\2\52\2\53\5\52\2\53\1\52" +
				    "\1\53\1\52\30\0\3\52\2\0\13\52\5\53\2\0\3\52\2\53" +
				    "\12\0\6\52\2\0\6\52\2\0\6\52\11\0\7\52\1\0\7\52" +
				    "\221\0\43\52\10\53\1\0\2\53\2\0\12\53\6\0\u2ba4\52\14\0" +
				    "\27\52\4\0\61\52\u2104\0\u016e\52\2\0\152\52\46\0\7\52\14\0" +
				    "\5\52\5\0\1\52\1\53\12\52\1\0\15\52\1\0\5\52\1\0" +
				    "\1\52\1\0\2\52\1\0\2\52\1\0\154\52\41\0\u016b\52\22\0" +
				    "\100\52\2\0\66\52\50\0\15\52\3\0\20\53\20\0\7\53\14\0" +
				    "\2\52\30\0\3\52\31\0\1\52\6\0\5\52\1\0\207\52\2\0" +
				    "\1\53\4\0\1\52\13\0\12\53\7\0\32\52\4\0\1\52\1\0" +
				    "\32\52\13\0\131\52\3\0\6\52\2\0\6\52\2\0\6\52\2\0" +
				    "\3\52\3\0\2\52\3\0\2\52\22\0\3\53\4\0\14\52\1\0" +
				    "\32\52\1\0\23\52\1\0\2\52\1\0\17\52\2\0\16\52\42\0" +
				    "\173\52\105\0\65\52\210\0\1\53\202\0\35\52\3\0\61\52\57\0" +
				    "\37\52\21\0\33\52\65\0\36\52\2\0\44\52\4\0\10\52\1\0" +
				    "\5\52\52\0\236\52\2\0\12\53\u0356\0\6\52\2\0\1\52\1\0" +
				    "\54\52\1\0\2\52\3\0\1\52\2\0\27\52\252\0\26\52\12\0" +
				    "\32\52\106\0\70\52\6\0\2\52\100\0\1\52\3\53\1\0\2\53" +
				    "\5\0\4\53\4\52\1\0\3\52\1\0\33\52\4\0\3\53\4\0" +
				    "\1\53\40\0\35\52\203\0\66\52\12\0\26\52\12\0\23\52\215\0" +
				    "\111\52\u03b7\0\3\53\65\52\17\53\37\0\12\53\20\0\3\53\55\52" +
				    "\13\53\2\0\1\53\22\0\31\52\7\0\12\53\6\0\3\53\44\52" +
				    "\16\53\1\0\12\53\100\0\3\53\60\52\16\53\4\52\13\0\12\53" +
				    "\u04a6\0\53\52\15\53\10\0\12\53\u0936\0\u036f\52\221\0\143\52\u0b9d\0" +
				    "\u042f\52\u33d1\0\u0239\52\u04c7\0\105\52\13\0\1\52\56\53\20\0\4\53" +
				    "\15\52\u4060\0\2\52\u2163\0\5\53\3\0\26\53\2\0\7\53\36\0" +
				    "\4\53\224\0\3\53\u01bb\0\125\52\1\0\107\52\1\0\2\52\2\0" +
				    "\1\52\2\0\2\52\2\0\4\52\1\0\14\52\1\0\1\52\1\0" +
				    "\7\52\1\0\101\52\1\0\4\52\2\0\10\52\1\0\7\52\1\0" +
				    "\34\52\1\0\4\52\1\0\5\52\1\0\1\52\3\0\7\52\1\0" +
				    "\u0154\52\2\0\31\52\1\0\31\52\1\0\37\52\1\0\31\52\1\0" +
				    "\37\52\1\0\31\52\1\0\37\52\1\0\31\52\1\0\37\52\1\0" +
				    "\31\52\1\0\10\52\2\0\62\53\u1600\0\4\52\1\0\33\52\1\0" +
				    "\2\52\1\0\1\52\2\0\1\52\1\0\12\52\1\0\4\52\1\0" +
				    "\1\52\1\0\1\52\6\0\1\52\4\0\1\52\1\0\1\52\1\0" +
				    "\1\52\1\0\3\52\1\0\2\52\1\0\1\52\2\0\1\52\1\0" +
				    "\1\52\1\0\1\52\1\0\1\52\1\0\1\52\1\0\2\52\1\0" +
				    "\1\52\2\0\4\52\1\0\7\52\1\0\4\52\1\0\4\52\1\0" +
				    "\1\52\1\0\12\52\1\0\21\52\5\0\3\52\1\0\5\52\1\0" +
				    "\21\52\u1144\0\ua6d7\52\51\0\u1035\52\13\0\336\52\u3fe2\0\u021e\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"
				    +
				    "\1\53\36\0\140\53\200\0\360\53\uffff\0\uffff\0\ufe12\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
		    "\2\0\1\1\1\2\1\3\24\2\1\0\2\1\1\4" +
				    "\1\2\1\5\1\6\1\7\1\10\5\11\1\12\1\11" +
				    "\1\13\1\3\30\2\1\1\6\2\1\1\15\2\1\1" +
				    "\12\2\1\14\1\0\5\11\44\2\1\1\31\2\2\0" +
				    "\3\11\3\2\1\1\24\2\1\1\31\2\1\0\1\14" +
				    "\3\11\10\2\1\1\5\2\1\1\15\2\1\1\7\2" +
				    "\1\14\2\11\1\1\16\2\1\15\6\2\2\11\12\2" +
				    "\1\15\2\2\1\16\1\11\5\2\1\1\1\2\1\16" +
				    "\5\2";

    private static int[] zzUnpackAction()
    {
	int[] result = new int[319];
	int offset = 0;
	offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result)
    {
	int i = 0;       /* index in packed string  */
	int j = offset;  /* index in unpacked array */
	int l = packed.length();
	while (i < l)
	{
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    do
		result[j++] = value; while (--count > 0);
	}
	return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
		    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e" +
				    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee" +
				    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e" +
				    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\144\0\u0578\0\u05aa\0\144" +
				    "\0\144\0\144\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\144" +
				    "\0\u06d6\0\144\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802" +
				    "\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992" +
				    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22" +
				    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2" +
				    "\0\u0ce4\0\u0d16\0\226\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10" +
				    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0" +
				    "\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130" +
				    "\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0" +
				    "\0\u12f2\0\144\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e" +
				    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae" +
				    "\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e" +
				    "\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce" +
				    "\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e" +
				    "\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee" +
				    "\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e" +
				    "\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e" +
				    "\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e" +
				    "\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e" +
				    "\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be" +
				    "\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e" +
				    "\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de" +
				    "\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e" +
				    "\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe" +
				    "\0\u1f40\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c" +
				    "\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u16da\0\u2c56\0\u2c88\0\u2cba" +
				    "\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a" +
				    "\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda" +
				    "\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a" +
				    "\0\144\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8" +
				    "\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458" +
				    "\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8" +
				    "\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778" +
				    "\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908" +
				    "\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u0578" +
				    "\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4";

    private static int[] zzUnpackRowMap()
    {
	int[] result = new int[319];
	int offset = 0;
	offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result)
    {
	int i = 0;  /* index in packed string  */
	int j = offset;  /* index in unpacked array */
	int l = packed.length();
	while (i < l)
	{
	    int high = packed.charAt(i++) << 16;
	    result[j++] = high | packed.charAt(i++);
	}
	return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
		    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12" +
				    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22" +
				    "\1\4\1\23\1\24\1\25\1\26\3\4\1\27\1\30" +
				    "\1\31\2\4\4\5\1\32\1\3\1\33\1\3\2\0" +
				    "\1\34\1\3\1\35\1\36\1\3\1\37\1\40\1\3" +
				    "\1\41\1\42\1\35\13\43\1\44\10\43\1\45\14\43" +
				    "\1\32\1\3\1\46\10\43\1\47\1\50\1\51\3\43" +
				    "\63\0\1\4\1\36\32\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\10\0\1\5\32\0\4\5\7\0\1\53" +
				    "\12\0\1\4\1\36\1\4\1\54\1\55\4\4\1\56" +
				    "\1\4\1\57\5\4\1\60\12\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\4\4\1\61" +
				    "\1\4\1\62\1\4\1\63\12\4\1\64\6\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\3\4\1\65\4\4\1\66\1\67\2\4\1\70\1\71" +
				    "\5\4\1\72\6\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\4\4\1\73\5\4\1\74" +
				    "\2\4\1\75\5\4\1\76\6\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\12\4\1\77" +
				    "\17\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\1\100\5\4\1\101\6\4\1\102\1\4" +
				    "\1\103\12\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\4\4\1\104\14\4\1\105\10\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\1\106\5\4\1\107\2\4\1\110\1\111\17\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\7\4\1\112\3\4\1\113\12\4\1\114\3\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\2\4\1\115\4\4\1\116\22\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\7\4" +
				    "\1\117\7\4\1\120\7\4\1\121\2\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\1\122" +
				    "\3\4\1\123\1\4\1\124\1\4\1\125\6\4\1\126" +
				    "\12\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\5\4\1\127\7\4\1\130\14\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\6\4\1\131\3\4\1\132\10\4\1\133\6\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\6\4\1\134\23\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\6\4\1\57\23\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\1\135\3\4\1\136\4\4\1\137\20\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\6\4" +
				    "\1\140\1\4\1\141\21\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\11\4\1\142\20\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\6\4\1\143\23\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\50\0\1\3\62\0\1\144\1\145\17\0" +
				    "\1\5\32\0\4\5\22\0\40\36\5\0\1\36\3\0" +
				    "\2\36\6\0\41\37\2\0\17\37\41\43\2\0\12\43" +
				    "\2\0\34\43\1\146\7\43\2\0\12\43\2\0\6\43" +
				    "\1\147\35\43\2\0\12\43\2\0\44\43\2\0\1\150" +
				    "\1\151\10\43\2\0\3\43\41\47\2\0\12\47\2\37" +
				    "\3\47\6\0\2\152\2\0\1\152\42\0\1\152\6\0" +
				    "\1\53\32\0\4\53\22\0\1\4\1\36\2\4\1\153" +
				    "\27\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\2\4\1\154\23\4\1\113\3\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\16\4\1\104\13\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\3\4\1\155\26\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\10\4\1\156\21\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\12\4\1\157\17\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\6\4\1\160\23\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\3\4\1\161\26\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\3\4\1\162\26\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\1\163\3\4\1\164\25\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\20\4\1\165\3\4\1\166\5\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\21\4" +
				    "\1\167\10\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\10\4\1\170\21\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\6\4" +
				    "\1\171\23\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\7\4\1\172\22\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\1\173" +
				    "\10\4\1\162\11\4\1\113\6\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\26\4\1\174" +
				    "\3\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\4\4\1\175\3\4\1\176\21\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\21\4\1\177\10\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\3\4\1\200\4\4\1\201" +
				    "\7\4\1\202\11\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\2\4\1\162\1\203\26\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\7\4\1\204\16\4\1\205\3\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\1\206" +
				    "\31\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\1\207\31\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\30\4\1\210\1\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\12\4\1\211\17\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\3\4\1\212\22\4" +
				    "\1\213\3\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\3\4\1\104\6\4\1\214\17\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\17\4\1\215\12\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\14\4\1\113\15\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\2\4\1\216\1\217\13\4\1\220\12\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\21\4\1\221\10\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\10\4\1\134\21\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\2\4\1\222\5\4\1\223\21\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\11\4\1\224" +
				    "\20\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\2\4\1\162\27\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\3\4\1\225" +
				    "\15\4\1\226\10\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\17\4\1\120\12\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\10\4\1\227\21\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\4\4\1\113\25\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\7\4\1\230\22\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\6\4\1\231\23\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\15\4\1\232\14\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\10\4\1\233\21\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\11\4\1\234\20\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\5\4\1\235\5\4\1\236" +
				    "\3\4\1\237\12\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\7\4\1\240\22\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\7\4\1\241\22\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\5\4\1\242\24\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\10\4\1\243\21\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\1\4\1\244\30\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\10\4\1\245\6\4\1\246\12\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\4\4\1\247" +
				    "\25\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\3\4\1\250\26\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\4\4\1\104" +
				    "\25\4\4\36\5\0\1\36\2\0\1\52\2\36\6\0" +
				    "\41\144\2\0\17\144\44\251\1\252\15\251\24\43\1\253" +
				    "\14\43\2\0\12\43\2\0\13\43\1\254\30\43\2\0" +
				    "\12\43\2\0\3\43\41\150\2\0\12\150\2\144\3\150" +
				    "\41\255\2\251\12\255\2\251\3\255\1\0\1\4\1\36" +
				    "\3\4\1\256\26\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\12\4\1\171\17\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\6\4\1\113\23\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\20\4\1\257\11\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\1\260\31\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\17\4\1\261\12\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\1\262" +
				    "\5\4\1\124\23\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\12\4\1\113\17\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\3\4\1\263\26\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\10\4\1\264\1\265\20\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\7\4\1\266\22\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\12\4\1\267\17\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\12\4\1\124\17\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\3\4\1\203\26\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\4\4\1\270\25\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\5\4\1\271\24\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\7\4\1\272\22\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\21\4\1\273\10\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\6\4\1\274\3\4\1\275\17\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\2\4" +
				    "\1\113\27\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\12\4\1\276\17\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\11\4" +
				    "\1\277\20\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\7\4\1\300\22\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\10\4" +
				    "\1\301\21\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\5\4\1\302\24\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\2\4" +
				    "\1\303\1\304\26\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\21\4\1\305\10\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\4\4\1\306\25\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\2\4\1\176\27\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\12\4\1\307\17\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\4\4\1\310\25\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\10\4\1\311\21\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\12\4\1\312\17\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\27\4\1\313\2\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\17\4\1\314\12\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\3\4\1\315\26\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\12\4\1\316\17\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\10\4\1\317\21\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\6\4\1\320\10\4\1\321" +
				    "\12\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\10\4\1\322\21\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\6\4\1\323" +
				    "\23\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\26\4\1\113\3\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\12\4\1\324" +
				    "\17\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\6\4\1\171\10\4\1\325\12\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\12\4\1\262\17\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\1\326\31\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\1\270" +
				    "\31\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\1\327\31\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\17\4\1\162\12\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\1\4\1\233\30\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\17\4\1\330\12\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\1\331\31\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\12\4\1\64\17\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\1\332\31\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\20\4\1\113\11\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\22\4" +
				    "\1\333\7\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\25\4\1\334\4\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\17\4" +
				    "\1\335\12\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\16\4\1\113\13\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\1\336" +
				    "\31\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\3\4\1\337\26\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\1\234\31\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\6\0\44\251" +
				    "\1\340\60\251\1\341\1\340\15\251\11\43\1\342\27\43" +
				    "\2\0\12\43\2\0\30\43\1\343\13\43\2\0\12\43" +
				    "\2\0\3\43\41\255\2\251\1\255\1\344\10\255\2\251" +
				    "\3\255\1\0\1\4\1\36\4\4\1\345\25\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\7\4\1\346\22\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\22\4\1\113\7\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\12\4\1\347\17\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\7\4\1\245\22\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\10\4\1\350\21\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\5\4\1\351\24\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\5\4\1\270\24\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\12\4\1\245\17\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\6\4\1\352\23\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\3\4\1\113\26\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\15\4\1\353\14\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\2\4\1\354\27\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\17\4\1\334\12\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\14\4\1\355\15\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\1\356\31\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\7\4\1\357\1\245\5\4\1\360" +
				    "\13\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\4\4\1\323\25\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\3\4\1\361" +
				    "\26\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\2\4\1\362\27\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\15\4\1\113" +
				    "\14\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\3\4\1\363\26\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\10\4\1\364" +
				    "\21\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\17\4\1\113\12\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\32\4\1\365" +
				    "\1\36\1\366\1\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\31\4\1\113\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\1\367\31\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\25\4\1\162\4\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\2\4\1\370\27\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\5\4\1\371\24\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\21\4\1\372\10\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\1\373\31\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\4\4\1\374\25\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\7\4\1\162\22\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\4\4\1\375\25\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\12\4\1\376\17\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\20\4\1\165\11\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\7\4\1\113\22\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\4\4\1\323\2\4\1\377" +
				    "\22\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\10\4\1\u0100\21\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\17\4\1\u0101" +
				    "\12\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\4\4\1\u0102\25\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\3\4\1\u0103" +
				    "\26\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\11\4\1\u0104\20\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\26\4\1\u0105" +
				    "\3\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\1\u0106\31\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\1\64\31\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\10\4\1\u0107\21\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\3\4\1\130\26\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\11\4\1\u0108\20\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\6\0\43\251\1\u0109\1\340\15\251\7\43\1\u010a" +
				    "\31\43\2\0\12\43\2\0\6\43\1\u010b\35\43\2\0" +
				    "\12\43\2\0\3\43\41\255\2\251\1\43\1\344\10\255" +
				    "\2\251\3\255\1\0\1\4\1\36\1\265\31\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\1\176\5\4\1\352\23\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\1\323\31\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\5\4\1\u010c\24\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\3\4\1\u010d\26\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\13\4\1\113\16\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\4\4\1\u010e\25\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\10\4\1\u010f\21\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\16\4\1\u0110\13\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\1\u0111\31\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\12\4\1\352\17\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\12\4" +
				    "\1\u0112\17\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\3\4\1\167\26\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\7\0\1\4\1\36\12\4" +
				    "\1\u0113\15\4\1\u0114\1\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\7\4\1\u0115\22\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\35\36" +
				    "\1\u0116\2\36\5\0\1\36\3\0\2\36\7\0\37\36" +
				    "\1\u0116\5\0\1\36\3\0\2\36\7\0\1\4\1\36" +
				    "\3\4\1\u0117\26\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\21\4\1\u0118\10\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\12\4\1\u0119\17\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\3\4\1\124\26\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\7\4\1\u011a\22\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\13\4\1\u0118\16\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\3\4\1\u011b\26\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\26\4\1\u011c\3\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\16\4\1\176\13\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\5\4\1\u011d\24\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\17\4\1\u011e\12\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\30\4\1\270\1\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\23\4\1\u011f\6\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\17\4\1\270\12\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\10\4\1\u0120\21\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\20\4\1\u0121\11\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\5\4\1\113\24\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\1\305\31\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\6\0\6\43\1\u0122\32\43" +
				    "\2\0\12\43\2\0\26\43\1\u0123\15\43\2\0\12\43" +
				    "\2\0\3\43\1\0\1\4\1\36\30\4\1\u0124\1\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\13\4\1\u0125\16\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\6\4\1\u0126\23\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\12\4\1\u0127\17\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\30\4\1\u0128\1\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\26\4\1\162\3\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\4\4\1\u0129\25\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\27\4\1\u012a\2\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\1\4\1\36\5\4\1\u012b\24\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\11\4\1\162\20\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\32\36\1\u012c\5\36\5\0\1\36" +
				    "\3\0\2\36\7\0\1\4\1\36\6\4\1\124\23\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\7\0\1\4" +
				    "\1\36\1\u012d\31\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\21\4\1\270\10\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\5\4\1\166\24\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\6\0\1\u012e\40\u011b\2\0\2\u012e\1\0\1\36" +
				    "\3\u012e\2\u011b\6\u012e\1\0\1\4\1\36\12\4\1\u012f" +
				    "\17\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\10\4\1\270\21\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\23\4\1\113" +
				    "\6\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\21\4\1\162\10\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\5\4\1\u0130" +
				    "\24\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\12\4\1\u0131\17\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\6\0\41\u0122\2\0\2\u0122\2\43" +
				    "\6\u0122\2\u012e\3\u0122\15\43\1\u0132\23\43\2\0\12\43" +
				    "\2\0\3\43\1\0\1\4\1\36\1\u0133\4\4\1\u012b" +
				    "\24\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\21\4\1\113\10\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\7\4\1\u0134" +
				    "\22\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\7\4\1\270\22\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\17\4\1\u0135" +
				    "\12\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\21\4\1\u0136\10\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\21\4\1\124" +
				    "\10\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\1\u0137\31\4\4\36\5\0\1\36\2\0" +
				    "\1\52\2\36\7\0\5\36\1\u0138\32\36\5\0\1\36" +
				    "\3\0\2\36\7\0\1\4\1\36\5\4\1\162\24\4" +
				    "\4\36\5\0\1\36\2\0\1\52\2\36\6\0\41\u012e" +
				    "\2\0\2\u012e\2\0\13\u012e\1\0\1\4\1\36\7\4" +
				    "\1\u0139\22\4\4\36\5\0\1\36\2\0\1\52\2\36" +
				    "\7\0\1\4\1\36\30\4\1\u0114\1\4\4\36\5\0" +
				    "\1\36\2\0\1\52\2\36\6\0\1\u013a\40\u0131\2\0" +
				    "\2\u013a\1\0\1\36\3\u013a\2\u0131\6\u013a\41\u0132\2\0" +
				    "\2\u0132\2\43\6\u0132\2\u013a\3\u0132\1\0\1\4\1\36" +
				    "\2\4\1\u013b\27\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\10\4\1\u013c\21\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\6\4\1\u013d\23\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\4\4\1\u013e\25\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\7\0\1\4\1\36" +
				    "\2\4\1\270\27\4\4\36\5\0\1\36\2\0\1\52" +
				    "\2\36\7\0\1\4\1\36\3\4\1\176\26\4\4\36" +
				    "\5\0\1\36\2\0\1\52\2\36\6\0\41\u013a\2\0" +
				    "\2\u013a\2\0\13\u013a\1\0\1\4\1\36\2\4\1\154" +
				    "\27\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\24\4\1\266\5\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\5\4\1\u0108" +
				    "\24\4\4\36\5\0\1\36\2\0\1\52\2\36\7\0" +
				    "\1\4\1\36\12\4\1\u013f\17\4\4\36\5\0\1\36" +
				    "\2\0\1\52\2\36\7\0\1\4\1\36\3\4\1\u0130" +
				    "\26\4\4\36\5\0\1\36\2\0\1\52\2\36\6\0";

    private static int[] zzUnpackTrans()
    {
	int[] result = new int[15350];
	int offset = 0;
	offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result)
    {
	int i = 0;       /* index in packed string  */
	int j = offset;  /* index in unpacked array */
	int l = packed.length();
	while (i < l)
	{
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    value--;
	    do
		result[j++] = value; while (--count > 0);
	}
	return j;
    }

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
		    "Unkown internal scanner error",
		    "Error: could not match input",
		    "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
		    "\2\0\1\11\26\1\1\0\2\1\1\11\2\1\3\11" +
				    "\5\1\1\11\1\1\1\11\72\1\1\0\4\1\1\11" +
				    "\76\1\2\0\65\1\1\0\50\1\1\11\66\1";

    private static int[] zzUnpackAttribute()
    {
	int[] result = new int[319];
	int offset = 0;
	offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result)
    {
	int i = 0;       /* index in packed string  */
	int j = offset;  /* index in unpacked array */
	int l = packed.length();
	while (i < l)
	{
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    do
		result[j++] = value; while (--count > 0);
	}
	return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    public StringBuilder newLines;

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public LexerTokenization(java.io.Reader in)
    {
	this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed)
    {
	char[] map = new char[0x110000];
	int i = 0;  /* index in packed string  */
	int j = 0;  /* index in unpacked array */
	while (i < 2858)
	{
	    int count = packed.charAt(i++);
	    char value = packed.charAt(i++);
	    do
		map[j++] = value; while (--count > 0);
	}
	return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException
    {

    /* first: make room (if you can) */
	if (zzStartRead > 0)
	{
	    zzEndRead += zzFinalHighSurrogate;
	    zzFinalHighSurrogate = 0;
	    System.arraycopy(zzBuffer, zzStartRead,
			    zzBuffer, 0,
			    zzEndRead - zzStartRead);

      /* translate stored positions */
	    zzEndRead -= zzStartRead;
	    zzCurrentPos -= zzStartRead;
	    zzMarkedPos -= zzStartRead;
	    zzStartRead = 0;
	}

    /* is the buffer big enough? */
	if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate)
	{
      /* if not: blow it up */
	    char newBuffer[] = new char[zzBuffer.length * 2];
	    System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
	    zzBuffer = newBuffer;
	    zzEndRead += zzFinalHighSurrogate;
	    zzFinalHighSurrogate = 0;
	}

    /* fill the buffer with new input */
	int requested = zzBuffer.length - zzEndRead;
	int totalRead = 0;
	while (totalRead < requested)
	{
	    int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
	    if (numRead == -1)
	    {
		break;
	    }
	    totalRead += numRead;
	}

	if (totalRead > 0)
	{
	    zzEndRead += totalRead;
	    if (totalRead == requested)
	    { /* possibly more input available */
		if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1]))
		{
		    --zzEndRead;
		    zzFinalHighSurrogate = 1;
		}
	    }
	    return false;
	}

	// totalRead = 0: End of stream
	return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException
    {
	zzAtEOF = true;            /* indicate end of file */
	zzEndRead = zzStartRead;  /* invalidate buffer    */

	if (zzReader != null)
	    zzReader.close();
    }

    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p/>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p/>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader)
    {
	zzReader = reader;
	zzAtBOL = true;
	zzAtEOF = false;
	zzEOFDone = false;
	zzEndRead = zzStartRead = 0;
	zzCurrentPos = zzMarkedPos = 0;
	zzFinalHighSurrogate = 0;
	yyline = yychar = yycolumn = 0;
	zzLexicalState = YYINITIAL;
	if (zzBuffer.length > ZZ_BUFFERSIZE)
	    zzBuffer = new char[ZZ_BUFFERSIZE];
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate()
    {
	return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState)
    {
	zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext()
    {
	return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos)
    {
	return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength()
    {
	return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode)
    {
	String message;
	try
	{
	    message = ZZ_ERROR_MSG[errorCode];
	}
	catch (ArrayIndexOutOfBoundsException e)
	{
	    message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
	}

	throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number)
    {
	if (number > yylength())
	    zzScanError(ZZ_PUSHBACK_2BIG);

	zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public LexerToken yylex() throws java.io.IOException
    {
	int zzInput;
	int zzAction;

	// cached fields:
	int zzCurrentPosL;
	int zzMarkedPosL;
	int zzEndReadL = zzEndRead;
	char[] zzBufferL = zzBuffer;
	char[] zzCMapL = ZZ_CMAP;

	int[] zzTransL = ZZ_TRANS;
	int[] zzRowMapL = ZZ_ROWMAP;
	int[] zzAttrL = ZZ_ATTRIBUTE;

	while (true)
	{
	    zzMarkedPosL = zzMarkedPos;

	    zzAction = -1;

	    zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

	    zzState = ZZ_LEXSTATE[zzLexicalState];

	    // set up zzAction for empty match case:
	    int zzAttributes = zzAttrL[zzState];
	    if ((zzAttributes & 1) == 1)
	    {
		zzAction = zzState;
	    }

	    zzForAction:
	    {
		while (true)
		{

		    if (zzCurrentPosL < zzEndReadL)
		    {
			zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
			zzCurrentPosL += Character.charCount(zzInput);
		    }
		    else if (zzAtEOF)
		    {
			zzInput = YYEOF;
			break zzForAction;
		    }
		    else
		    {
			// store back cached positions
			zzCurrentPos = zzCurrentPosL;
			zzMarkedPos = zzMarkedPosL;
			boolean eof = zzRefill();
			// get translated positions and possibly new buffer
			zzCurrentPosL = zzCurrentPos;
			zzMarkedPosL = zzMarkedPos;
			zzBufferL = zzBuffer;
			zzEndReadL = zzEndRead;
			if (eof)
			{
			    zzInput = YYEOF;
			    break zzForAction;
			}
			else
			{
			    zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
			    zzCurrentPosL += Character.charCount(zzInput);
			}
		    }
		    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
		    if (zzNext == -1)
			break zzForAction;
		    zzState = zzNext;

		    zzAttributes = zzAttrL[zzState];
		    if ((zzAttributes & 1) == 1)
		    {
			zzAction = zzState;
			zzMarkedPosL = zzCurrentPosL;
			if ((zzAttributes & 8) == 8)
			    break zzForAction;
		    }

		}
	    }

	    // store back cached position
	    zzMarkedPos = zzMarkedPosL;

	    switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction])
	    {
		case 1:
		{
		    return LexerToken.PASS;
		}
		case 15:
		    break;
		case 2:
		{
		    return LexerToken.ID;
		}
		case 16:
		    break;
		case 3:
		{
		    return LexerToken.NUMBER;
		}
		case 17:
		    break;
		case 4:
		{ /* Ignore brackets */
		}
		case 18:
		    break;
		case 5:
		{ /* Ignore preprocessor */
		}
		case 19:
		    break;
		case 6:
		{
		    yybegin(STRING);
		}
		case 20:
		    break;
		case 7:
		{ /* Ignore spaces and tabs */
		}
		case 21:
		    break;
		case 8:
		{ /* Ignore semicolons */
		}
		case 22:
		    break;
		case 9:
		{
		}
		case 23:
		    break;
		case 10:
		{
		    yybegin(YYINITIAL);
		    return LexerToken.STRING;
		}
		case 24:
		    break;
		case 11:
		{
		    return LexerToken.FUNCTION_NAME;
		}
		case 25:
		    break;
		case 12:
		{
		    char[] ch;
		    ch = yytext().toCharArray();
		    newLines = new StringBuilder();
		    for (char c : ch)
		    {
			if (c == '\n')
			{
			    newLines.append(c);
			}
		    }
		    return LexerToken.NEW_LINES;
		}
		case 26:
		    break;
		case 13:
		{ /* Ignore imports */
		}
		case 27:
		    break;
		case 14:
		{ /* Ignore packages */
		}
		case 28:
		    break;
		default:
		    if (zzInput == YYEOF && zzStartRead == zzCurrentPos)
		    {
			zzAtEOF = true;
			return null;
		    }
		    else
		    {
			zzScanError(ZZ_NO_MATCH);
		    }
	    }
	}
    }

}
